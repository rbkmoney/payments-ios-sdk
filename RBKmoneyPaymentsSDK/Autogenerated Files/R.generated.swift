//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Cards.json`.
    static let cardsJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Cards", pathExtension: "json")
    
    /// `bundle.url(forResource: "Cards", withExtension: "json")`
    static func cardsJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cardsJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `PaymentMethod`.
    static let paymentMethod = _R.storyboard.paymentMethod()
    
    /// `UIStoryboard(name: "PaymentMethod", bundle: ...)`
    static func paymentMethod(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.paymentMethod)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 1 localization keys.
    struct localizable {
      /// Value: Строка текста!
      static let sample_string_identifier = Rswift.StringResource(key: "sample_string_identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Строка текста!
      static func sample_string_identifier(_: Void = ()) -> String {
        return NSLocalizedString("sample_string_identifier", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try paymentMethod.validate()
    }
    
    struct paymentMethod: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PaymentMethodViewController
      
      let bundle = R.hostingBundle
      let initial = StoryboardViewControllerResource<PaymentMethodViewController>(identifier: "Initial")
      let name = "PaymentMethod"
      
      func initial(_: Void = ()) -> PaymentMethodViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: initial)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.paymentMethod().initial() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'initial' could not be loaded from storyboard 'PaymentMethod' as 'PaymentMethodViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
