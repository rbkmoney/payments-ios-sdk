//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Cards.json`.
    static let cardsJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Cards", pathExtension: "json")
    
    /// `bundle.url(forResource: "Cards", withExtension: "json")`
    static func cardsJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cardsJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    /// This `R.image.bankCard` struct is generated, and contains static references to 10 images.
    struct bankCard {
      /// Image `cardholder`.
      static let cardholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "BankCard/cardholder")
      /// Image `checkmark`.
      static let checkmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "BankCard/checkmark")
      /// Image `cross`.
      static let cross = Rswift.ImageResource(bundle: R.hostingBundle, name: "BankCard/cross")
      /// Image `cvv`.
      static let cvv = Rswift.ImageResource(bundle: R.hostingBundle, name: "BankCard/cvv")
      /// Image `date`.
      static let date = Rswift.ImageResource(bundle: R.hostingBundle, name: "BankCard/date")
      /// Image `email`.
      static let email = Rswift.ImageResource(bundle: R.hostingBundle, name: "BankCard/email")
      /// Image `mastercard`.
      static let mastercard = Rswift.ImageResource(bundle: R.hostingBundle, name: "BankCard/mastercard")
      /// Image `nspkmir`.
      static let nspkmir = Rswift.ImageResource(bundle: R.hostingBundle, name: "BankCard/nspkmir")
      /// Image `number`.
      static let number = Rswift.ImageResource(bundle: R.hostingBundle, name: "BankCard/number")
      /// Image `visa`.
      static let visa = Rswift.ImageResource(bundle: R.hostingBundle, name: "BankCard/visa")
      
      /// `UIImage(named: "cardholder", bundle: ..., traitCollection: ...)`
      static func cardholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.bankCard.cardholder, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "checkmark", bundle: ..., traitCollection: ...)`
      static func checkmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.bankCard.checkmark, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "cross", bundle: ..., traitCollection: ...)`
      static func cross(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.bankCard.cross, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "cvv", bundle: ..., traitCollection: ...)`
      static func cvv(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.bankCard.cvv, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "date", bundle: ..., traitCollection: ...)`
      static func date(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.bankCard.date, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "email", bundle: ..., traitCollection: ...)`
      static func email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.bankCard.email, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "mastercard", bundle: ..., traitCollection: ...)`
      static func mastercard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.bankCard.mastercard, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "nspkmir", bundle: ..., traitCollection: ...)`
      static func nspkmir(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.bankCard.nspkmir, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "number", bundle: ..., traitCollection: ...)`
      static func number(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.bankCard.number, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "visa", bundle: ..., traitCollection: ...)`
      static func visa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.bankCard.visa, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.bottomLogos` struct is generated, and contains static references to 3 images.
    struct bottomLogos {
      /// Image `3ds_pci_dss`.
      static let ds_pci_dss = Rswift.ImageResource(bundle: R.hostingBundle, name: "BottomLogos/3ds_pci_dss")
      /// Image `lock`.
      static let lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "BottomLogos/lock")
      /// Image `rbk_money`.
      static let rbk_money = Rswift.ImageResource(bundle: R.hostingBundle, name: "BottomLogos/rbk_money")
      
      /// `UIImage(named: "3ds_pci_dss", bundle: ..., traitCollection: ...)`
      static func ds_pci_dss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.bottomLogos.ds_pci_dss, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "lock", bundle: ..., traitCollection: ...)`
      static func lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.bottomLogos.lock, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "rbk_money", bundle: ..., traitCollection: ...)`
      static func rbk_money(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.bottomLogos.rbk_money, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.common` struct is generated, and contains static references to 4 images.
    struct common {
      /// Image `back`.
      static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/back")
      /// Image `close`.
      static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/close")
      /// Image `rounded_bottom_corners`.
      static let rounded_bottom_corners = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/rounded_bottom_corners")
      /// Image `rounded_top_corners`.
      static let rounded_top_corners = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/rounded_top_corners")
      
      /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
      static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.back, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
      static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.close, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "rounded_bottom_corners", bundle: ..., traitCollection: ...)`
      static func rounded_bottom_corners(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.rounded_bottom_corners, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "rounded_top_corners", bundle: ..., traitCollection: ...)`
      static func rounded_top_corners(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.rounded_top_corners, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.paymentMethods` struct is generated, and contains static references to 6 images.
    struct paymentMethods {
      /// Image `applepay`.
      static let applepay = Rswift.ImageResource(bundle: R.hostingBundle, name: "PaymentMethods/applepay")
      /// Image `bankcard`.
      static let bankcard = Rswift.ImageResource(bundle: R.hostingBundle, name: "PaymentMethods/bankcard")
      /// Image `cash`.
      static let cash = Rswift.ImageResource(bundle: R.hostingBundle, name: "PaymentMethods/cash")
      /// Image `ebank`.
      static let ebank = Rswift.ImageResource(bundle: R.hostingBundle, name: "PaymentMethods/ebank")
      /// Image `ewallet`.
      static let ewallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "PaymentMethods/ewallet")
      /// Image `mobile`.
      static let mobile = Rswift.ImageResource(bundle: R.hostingBundle, name: "PaymentMethods/mobile")
      
      /// `UIImage(named: "applepay", bundle: ..., traitCollection: ...)`
      static func applepay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.paymentMethods.applepay, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "bankcard", bundle: ..., traitCollection: ...)`
      static func bankcard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.paymentMethods.bankcard, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "cash", bundle: ..., traitCollection: ...)`
      static func cash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.paymentMethods.cash, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "ebank", bundle: ..., traitCollection: ...)`
      static func ebank(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.paymentMethods.ebank, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "ewallet", bundle: ..., traitCollection: ...)`
      static func ewallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.paymentMethods.ewallet, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "mobile", bundle: ..., traitCollection: ...)`
      static func mobile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.paymentMethods.mobile, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.result` struct is generated, and contains static references to 3 images.
    struct result {
      /// Image `paid`.
      static let paid = Rswift.ImageResource(bundle: R.hostingBundle, name: "Result/paid")
      /// Image `unpaid`.
      static let unpaid = Rswift.ImageResource(bundle: R.hostingBundle, name: "Result/unpaid")
      /// Image `warning`.
      static let warning = Rswift.ImageResource(bundle: R.hostingBundle, name: "Result/warning")
      
      /// `UIImage(named: "paid", bundle: ..., traitCollection: ...)`
      static func paid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.result.paid, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "unpaid", bundle: ..., traitCollection: ...)`
      static func unpaid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.result.unpaid, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "warning", bundle: ..., traitCollection: ...)`
      static func warning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.result.warning, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `InvoiceSummaryView`.
    static let invoiceSummaryView = _R.nib._InvoiceSummaryView()
    /// Nib `LogotypesView`.
    static let logotypesView = _R.nib._LogotypesView()
    /// Nib `PaymentMethodCell`.
    static let paymentMethodCell = _R.nib._PaymentMethodCell()
    /// Nib `PaymentMethodsTableFooterView`.
    static let paymentMethodsTableFooterView = _R.nib._PaymentMethodsTableFooterView()
    /// Nib `PaymentMethodsTableHeaderView`.
    static let paymentMethodsTableHeaderView = _R.nib._PaymentMethodsTableHeaderView()
    
    /// `UINib(name: "InvoiceSummaryView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.invoiceSummaryView) instead")
    static func invoiceSummaryView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.invoiceSummaryView)
    }
    
    /// `UINib(name: "LogotypesView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.logotypesView) instead")
    static func logotypesView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.logotypesView)
    }
    
    /// `UINib(name: "PaymentMethodCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.paymentMethodCell) instead")
    static func paymentMethodCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paymentMethodCell)
    }
    
    /// `UINib(name: "PaymentMethodsTableFooterView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.paymentMethodsTableFooterView) instead")
    static func paymentMethodsTableFooterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paymentMethodsTableFooterView)
    }
    
    /// `UINib(name: "PaymentMethodsTableHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.paymentMethodsTableHeaderView) instead")
    static func paymentMethodsTableHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paymentMethodsTableHeaderView)
    }
    
    static func invoiceSummaryView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.invoiceSummaryView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func logotypesView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.logotypesView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func paymentMethodCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentMethodCell? {
      return R.nib.paymentMethodCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentMethodCell
    }
    
    static func paymentMethodsTableFooterView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.paymentMethodsTableFooterView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func paymentMethodsTableHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.paymentMethodsTableHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `PaymentMethodCell`.
    static let paymentMethodCell: Rswift.ReuseIdentifier<PaymentMethodCell> = Rswift.ReuseIdentifier(identifier: "PaymentMethodCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `ApplePay`.
    static let applePay = _R.storyboard.applePay()
    /// Storyboard `BankCard`.
    static let bankCard = _R.storyboard.bankCard()
    /// Storyboard `PaidInvoice`.
    static let paidInvoice = _R.storyboard.paidInvoice()
    /// Storyboard `PaymentMethod`.
    static let paymentMethod = _R.storyboard.paymentMethod()
    /// Storyboard `PaymentProgress`.
    static let paymentProgress = _R.storyboard.paymentProgress()
    /// Storyboard `UnpaidInvoice`.
    static let unpaidInvoice = _R.storyboard.unpaidInvoice()
    
    /// `UIStoryboard(name: "ApplePay", bundle: ...)`
    static func applePay(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.applePay)
    }
    
    /// `UIStoryboard(name: "BankCard", bundle: ...)`
    static func bankCard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.bankCard)
    }
    
    /// `UIStoryboard(name: "PaidInvoice", bundle: ...)`
    static func paidInvoice(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.paidInvoice)
    }
    
    /// `UIStoryboard(name: "PaymentMethod", bundle: ...)`
    static func paymentMethod(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.paymentMethod)
    }
    
    /// `UIStoryboard(name: "PaymentProgress", bundle: ...)`
    static func paymentProgress(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.paymentProgress)
    }
    
    /// `UIStoryboard(name: "UnpaidInvoice", bundle: ...)`
    static func unpaidInvoice(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.unpaidInvoice)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 85 localization keys.
    struct localizable {
      /// Value: Apple Pay
      static let apple_pay_header_title = Rswift.StringResource(key: "apple_pay_header_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: CVV/CVC
      static let bank_card_cvc_placeholder = Rswift.StringResource(key: "bank_card_cvc_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email для чека
      static let apple_pay_email_placeholder = Rswift.StringResource(key: "apple_pay_email_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email для чека
      static let bank_card_email_placeholder = Rswift.StringResource(key: "bank_card_email_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OK
      static let alert_button_ok = Rswift.StringResource(key: "alert_button_ok", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OK
      static let paid_action_done = Rswift.StringResource(key: "paid_action_done", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: © 2008-2018 RBKmoney | Direct Payments Ltd.
      static let copyright = Rswift.StringResource(key: "copyright", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: БАНКОВСКАЯ КАРТА
      static let payment_method_bank_card = Rswift.StringResource(key: "payment_method_bank_card", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: БЕЗОПАСНАЯ ОПЛАТА С
      static let secure_payment = Rswift.StringResource(key: "secure_payment", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ВСЕ СПОСОБЫ ОПЛАТЫ
      static let unpaid_action_restart_scenario = Rswift.StringResource(key: "unpaid_action_restart_scenario", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Выберите способ оплаты
      static let payment_method_header_title = Rswift.StringResource(key: "payment_method_header_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ДЕТАЛИ ЗАКАЗА
      static let order_details = Rswift.StringResource(key: "order_details", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Да
      static let alert_button_yes = Rswift.StringResource(key: "alert_button_yes", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Договор более не имеет силы по причине истечения срока действия или расторжения.
      static let error_message_invalid_contract_status = Rswift.StringResource(key: "error_message_invalid_contract_status", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Заказ оплачен картой %@.
      static let paid_card_description = Rswift.StringResource(key: "paid_card_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Заказ оплачен картой %@ •• %@
      static let paid_card_with_last_digits_description = Rswift.StringResource(key: "paid_card_with_last_digits_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Заказ оплачен.
      static let paid_description = Rswift.StringResource(key: "paid_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Имя на карте
      static let bank_card_cardholder_placeholder = Rswift.StringResource(key: "bank_card_cardholder_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Инвойс отменен.
      static let error_message_invoice_cancelled = Rswift.StringResource(key: "error_message_invoice_cancelled", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Инвойс отменён
      static let unpaid_status_cancelled = Rswift.StringResource(key: "unpaid_status_cancelled", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Инвойс уже оплачен
      static let unpaid_status_paid = Rswift.StringResource(key: "unpaid_status_paid", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Использовать другую карту
      static let unpaid_action_reenter_data = Rswift.StringResource(key: "unpaid_action_reenter_data", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ММ/ГГ
      static let bank_card_date_placeholder = Rswift.StringResource(key: "bank_card_date_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Магазин заблокирован или его операции приостановлены.
      static let error_message_invalid_shop_status = Rswift.StringResource(key: "error_message_invalid_shop_status", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Методы оплаты отсутствуют.
      static let error_message_no_payment_methods = Rswift.StringResource(key: "error_message_no_payment_methods", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не оплачено
      static let unpaid_status_unpaid = Rswift.StringResource(key: "unpaid_status_unpaid", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось выполнить запрос.
      static let error_message_request_failed = Rswift.StringResource(key: "error_message_request_failed", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось выполнить платёж.
      static let error_message_payment_failed = Rswift.StringResource(key: "error_message_payment_failed", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось получить инвойс.
      static let error_message_cannot_obtain_invoice = Rswift.StringResource(key: "error_message_cannot_obtain_invoice", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось получить методы оплаты.
      static let error_message_cannot_obtain_invoice_payment_methods = Rswift.StringResource(key: "error_message_cannot_obtain_invoice_payment_methods", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось получить события инвойса.
      static let error_message_cannot_obtain_invoice_events = Rswift.StringResource(key: "error_message_cannot_obtain_invoice_events", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось создать платеж.
      static let error_message_cannot_create_payment = Rswift.StringResource(key: "error_message_cannot_create_payment", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось создать платёжный ресурс.
      static let error_message_cannot_create_payment_resource = Rswift.StringResource(key: "error_message_cannot_create_payment_resource", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось сформировать запрос к серверу.
      static let error_message_cannot_build_request = Rswift.StringResource(key: "error_message_cannot_build_request", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось установить безопасное соединение с сервером.
      static let error_message_server_insecure_connection = Rswift.StringResource(key: "error_message_server_insecure_connection", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Невернo указан родительский рекуррентный платёж.
      static let error_message_invalid_recurrent_parent = Rswift.StringResource(key: "error_message_invalid_recurrent_parent", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Невернoе содержимое платёжной сессии.
      static let error_message_invalid_payment_session = Rswift.StringResource(key: "error_message_invalid_payment_session", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Неверная ревизия заявки.
      static let error_message_invalid_claim_revision = Rswift.StringResource(key: "error_message_invalid_claim_revision", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Неверное содержимое токена платёжного инструмента.
      static let error_message_invalid_payment_tool_token = Rswift.StringResource(key: "error_message_invalid_payment_tool_token", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Неверные данные запроса.
      static let error_message_invalid_request = Rswift.StringResource(key: "error_message_invalid_request", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Неверные изменения участника, например, попытка создать магазин в валюте, недоступной в рамках договора.
      static let error_message_invalid_changeset = Rswift.StringResource(key: "error_message_invalid_changeset", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Неверный платёжный инструмент.
      static let error_message_invalid_payment_tool = Rswift.StringResource(key: "error_message_invalid_payment_tool", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Неверный статус заявки.
      static let error_message_invalid_claim_status = Rswift.StringResource(key: "error_message_invalid_claim_status", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Неверный статус инвойса.
      static let error_message_invalid_invoice_status = Rswift.StringResource(key: "error_message_invalid_invoice_status", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Неверный статус платежа.
      static let error_message_invalid_payment_status = Rswift.StringResource(key: "error_message_invalid_payment_status", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Неверный формат времени.
      static let error_message_invalid_deadline = Rswift.StringResource(key: "error_message_invalid_deadline", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Недопустимый статус инвойса.
      static let error_message_unexpected_invoice_status = Rswift.StringResource(key: "error_message_unexpected_invoice_status", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Недостаточно средств на счёте.
      static let error_message_insufficient_funds = Rswift.StringResource(key: "error_message_insufficient_funds", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Недостаточный объём денежных средств на счёте магазина.
      static let error_message_insufficent_account_balance = Rswift.StringResource(key: "error_message_insufficent_account_balance", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Недоступная в рамках действующего договора операция.
      static let error_message_operation_not_permitted = Rswift.StringResource(key: "error_message_operation_not_permitted", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Некорректная корзина в инвойсе.
      static let error_message_invalid_invoice_cart = Rswift.StringResource(key: "error_message_invalid_invoice_cart", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Неподдерживаемый системой или неподключенный в рамках действующего договора платёжный инструмент.
      static let error_message_invalid_payment_resource = Rswift.StringResource(key: "error_message_invalid_payment_resource", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Нет
      static let alert_button_nope = Rswift.StringResource(key: "alert_button_nope", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Номер на карте
      static let bank_card_card_number_placeholder = Rswift.StringResource(key: "bank_card_card_number_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Оплата банковской картой
      static let bank_card_header_title = Rswift.StringResource(key: "bank_card_header_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Оплатить %@
      static let bank_card_pay = Rswift.StringResource(key: "bank_card_pay", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Отменить
      static let alert_button_cancel = Rswift.StringResource(key: "alert_button_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Отсутствует соединение с интернетом.
      static let error_message_no_internet = Rswift.StringResource(key: "error_message_no_internet", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ошибка
      static let alert_title_error = Rswift.StringResource(key: "alert_title_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Платеж возмещён
      static let unpaid_status_refunded = Rswift.StringResource(key: "unpaid_status_refunded", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Платёж отклонён эмитентом.
      static let error_message_rejected_by_issuer = Rswift.StringResource(key: "error_message_rejected_by_issuer", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Платёж отклонён.
      static let error_message_payment_rejected = Rswift.StringResource(key: "error_message_payment_rejected", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Платёж отменен.
      static let error_message_payment_cancelled = Rswift.StringResource(key: "error_message_payment_cancelled", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Повторить
      static let alert_button_retry = Rswift.StringResource(key: "alert_button_retry", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Получен некорректный ответ сервера.
      static let error_message_response_mapping_error = Rswift.StringResource(key: "error_message_response_mapping_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Получен ответ от сервера с HTTP кодом %d.
      static let error_message_unacceptable_status_code = Rswift.StringResource(key: "error_message_unacceptable_status_code", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Попробовать снова
      static let unpaid_action_retry = Rswift.StringResource(key: "unpaid_action_retry", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Попытка внести изменения участника, конфликтующие с изменениями в других заявках, ожидающих рассмотрения.
      static let error_message_changeset_conflict = Rswift.StringResource(key: "error_message_changeset_conflict", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Попытка возврата сверх суммы платежа.
      static let error_message_invoice_payment_amount_exceeded = Rswift.StringResource(key: "error_message_invoice_payment_amount_exceeded", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Попытка возврата средств в валюте, отличной от валюты платежа.
      static let error_message_inconsistent_refund_currency = Rswift.StringResource(key: "error_message_inconsistent_refund_currency", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Последний запущенный платёж по указанному инвойсу ещё не достиг финального статуса.
      static let error_message_invoice_payment_pending = Rswift.StringResource(key: "error_message_invoice_payment_pending", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Превышен разумный лимит выборки.
      static let error_message_limit_exceeded = Rswift.StringResource(key: "error_message_limit_exceeded", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Превышены лимиты.
      static let error_message_account_limits_exceeded = Rswift.StringResource(key: "error_message_account_limits_exceeded", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Предварительная авторизация отклонена.
      static let error_message_preauthorization_failed = Rswift.StringResource(key: "error_message_preauthorization_failed", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Произошла неизвестная ошибка.
      static let error_message_unknown_error = Rswift.StringResource(key: "error_message_unknown_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Произошла ошибка при взаимодействии с пользователем.
      static let error_message_user_interaction_failed = Rswift.StringResource(key: "error_message_user_interaction_failed", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Сервер вернул ошибку с неизвестным кодом %@.
      static let error_message_unknown_server_error = Rswift.StringResource(key: "error_message_unknown_server_error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Сервер недоступен.
      static let error_message_server_unavailable = Rswift.StringResource(key: "error_message_server_unavailable", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Срок действия инвойса закончился.
      static let error_message_invoice_expired = Rswift.StringResource(key: "error_message_invoice_expired", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Стоимость инвойса не указана или неверна.
      static let error_message_invalid_invoice_cost = Rswift.StringResource(key: "error_message_invalid_invoice_cost", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Указан идентификатор несуществующего магазина.
      static let error_message_invalid_shop_id = Rswift.StringResource(key: "error_message_invalid_shop_id", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Успешная оплата!
      static let paid_title = Rswift.StringResource(key: "paid_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Участник заблокирован или его операции приостановлены.
      static let error_message_invalid_party_status = Rswift.StringResource(key: "error_message_invalid_party_status", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Чек отправлен по адресу %@
      static let paid_email_description = Rswift.StringResource(key: "paid_email_description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Элемент не найден.
      static let error_message_element_not_found = Rswift.StringResource(key: "error_message_element_not_found", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Apple Pay
      static func apple_pay_header_title(_: Void = ()) -> String {
        return NSLocalizedString("apple_pay_header_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: CVV/CVC
      static func bank_card_cvc_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("bank_card_cvc_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Email для чека
      static func apple_pay_email_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("apple_pay_email_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Email для чека
      static func bank_card_email_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("bank_card_email_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: OK
      static func alert_button_ok(_: Void = ()) -> String {
        return NSLocalizedString("alert_button_ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: OK
      static func paid_action_done(_: Void = ()) -> String {
        return NSLocalizedString("paid_action_done", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: © 2008-2018 RBKmoney | Direct Payments Ltd.
      static func copyright(_: Void = ()) -> String {
        return NSLocalizedString("copyright", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: БАНКОВСКАЯ КАРТА
      static func payment_method_bank_card(_: Void = ()) -> String {
        return NSLocalizedString("payment_method_bank_card", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: БЕЗОПАСНАЯ ОПЛАТА С
      static func secure_payment(_: Void = ()) -> String {
        return NSLocalizedString("secure_payment", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: ВСЕ СПОСОБЫ ОПЛАТЫ
      static func unpaid_action_restart_scenario(_: Void = ()) -> String {
        return NSLocalizedString("unpaid_action_restart_scenario", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Выберите способ оплаты
      static func payment_method_header_title(_: Void = ()) -> String {
        return NSLocalizedString("payment_method_header_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: ДЕТАЛИ ЗАКАЗА
      static func order_details(_: Void = ()) -> String {
        return NSLocalizedString("order_details", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Да
      static func alert_button_yes(_: Void = ()) -> String {
        return NSLocalizedString("alert_button_yes", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Договор более не имеет силы по причине истечения срока действия или расторжения.
      static func error_message_invalid_contract_status(_: Void = ()) -> String {
        return NSLocalizedString("error_message_invalid_contract_status", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Заказ оплачен картой %@.
      static func paid_card_description(_ value1: String) -> String {
        return String(format: NSLocalizedString("paid_card_description", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: Заказ оплачен картой %@ •• %@
      static func paid_card_with_last_digits_description(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("paid_card_with_last_digits_description", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Value: Заказ оплачен.
      static func paid_description(_: Void = ()) -> String {
        return NSLocalizedString("paid_description", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Имя на карте
      static func bank_card_cardholder_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("bank_card_cardholder_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Инвойс отменен.
      static func error_message_invoice_cancelled(_: Void = ()) -> String {
        return NSLocalizedString("error_message_invoice_cancelled", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Инвойс отменён
      static func unpaid_status_cancelled(_: Void = ()) -> String {
        return NSLocalizedString("unpaid_status_cancelled", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Инвойс уже оплачен
      static func unpaid_status_paid(_: Void = ()) -> String {
        return NSLocalizedString("unpaid_status_paid", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Использовать другую карту
      static func unpaid_action_reenter_data(_: Void = ()) -> String {
        return NSLocalizedString("unpaid_action_reenter_data", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: ММ/ГГ
      static func bank_card_date_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("bank_card_date_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Магазин заблокирован или его операции приостановлены.
      static func error_message_invalid_shop_status(_: Void = ()) -> String {
        return NSLocalizedString("error_message_invalid_shop_status", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Методы оплаты отсутствуют.
      static func error_message_no_payment_methods(_: Void = ()) -> String {
        return NSLocalizedString("error_message_no_payment_methods", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не оплачено
      static func unpaid_status_unpaid(_: Void = ()) -> String {
        return NSLocalizedString("unpaid_status_unpaid", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не удалось выполнить запрос.
      static func error_message_request_failed(_: Void = ()) -> String {
        return NSLocalizedString("error_message_request_failed", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не удалось выполнить платёж.
      static func error_message_payment_failed(_: Void = ()) -> String {
        return NSLocalizedString("error_message_payment_failed", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не удалось получить инвойс.
      static func error_message_cannot_obtain_invoice(_: Void = ()) -> String {
        return NSLocalizedString("error_message_cannot_obtain_invoice", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не удалось получить методы оплаты.
      static func error_message_cannot_obtain_invoice_payment_methods(_: Void = ()) -> String {
        return NSLocalizedString("error_message_cannot_obtain_invoice_payment_methods", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не удалось получить события инвойса.
      static func error_message_cannot_obtain_invoice_events(_: Void = ()) -> String {
        return NSLocalizedString("error_message_cannot_obtain_invoice_events", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не удалось создать платеж.
      static func error_message_cannot_create_payment(_: Void = ()) -> String {
        return NSLocalizedString("error_message_cannot_create_payment", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не удалось создать платёжный ресурс.
      static func error_message_cannot_create_payment_resource(_: Void = ()) -> String {
        return NSLocalizedString("error_message_cannot_create_payment_resource", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не удалось сформировать запрос к серверу.
      static func error_message_cannot_build_request(_: Void = ()) -> String {
        return NSLocalizedString("error_message_cannot_build_request", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не удалось установить безопасное соединение с сервером.
      static func error_message_server_insecure_connection(_: Void = ()) -> String {
        return NSLocalizedString("error_message_server_insecure_connection", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Невернo указан родительский рекуррентный платёж.
      static func error_message_invalid_recurrent_parent(_: Void = ()) -> String {
        return NSLocalizedString("error_message_invalid_recurrent_parent", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Невернoе содержимое платёжной сессии.
      static func error_message_invalid_payment_session(_: Void = ()) -> String {
        return NSLocalizedString("error_message_invalid_payment_session", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Неверная ревизия заявки.
      static func error_message_invalid_claim_revision(_: Void = ()) -> String {
        return NSLocalizedString("error_message_invalid_claim_revision", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Неверное содержимое токена платёжного инструмента.
      static func error_message_invalid_payment_tool_token(_: Void = ()) -> String {
        return NSLocalizedString("error_message_invalid_payment_tool_token", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Неверные данные запроса.
      static func error_message_invalid_request(_: Void = ()) -> String {
        return NSLocalizedString("error_message_invalid_request", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Неверные изменения участника, например, попытка создать магазин в валюте, недоступной в рамках договора.
      static func error_message_invalid_changeset(_: Void = ()) -> String {
        return NSLocalizedString("error_message_invalid_changeset", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Неверный платёжный инструмент.
      static func error_message_invalid_payment_tool(_: Void = ()) -> String {
        return NSLocalizedString("error_message_invalid_payment_tool", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Неверный статус заявки.
      static func error_message_invalid_claim_status(_: Void = ()) -> String {
        return NSLocalizedString("error_message_invalid_claim_status", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Неверный статус инвойса.
      static func error_message_invalid_invoice_status(_: Void = ()) -> String {
        return NSLocalizedString("error_message_invalid_invoice_status", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Неверный статус платежа.
      static func error_message_invalid_payment_status(_: Void = ()) -> String {
        return NSLocalizedString("error_message_invalid_payment_status", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Неверный формат времени.
      static func error_message_invalid_deadline(_: Void = ()) -> String {
        return NSLocalizedString("error_message_invalid_deadline", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Недопустимый статус инвойса.
      static func error_message_unexpected_invoice_status(_: Void = ()) -> String {
        return NSLocalizedString("error_message_unexpected_invoice_status", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Недостаточно средств на счёте.
      static func error_message_insufficient_funds(_: Void = ()) -> String {
        return NSLocalizedString("error_message_insufficient_funds", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Недостаточный объём денежных средств на счёте магазина.
      static func error_message_insufficent_account_balance(_: Void = ()) -> String {
        return NSLocalizedString("error_message_insufficent_account_balance", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Недоступная в рамках действующего договора операция.
      static func error_message_operation_not_permitted(_: Void = ()) -> String {
        return NSLocalizedString("error_message_operation_not_permitted", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Некорректная корзина в инвойсе.
      static func error_message_invalid_invoice_cart(_: Void = ()) -> String {
        return NSLocalizedString("error_message_invalid_invoice_cart", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Неподдерживаемый системой или неподключенный в рамках действующего договора платёжный инструмент.
      static func error_message_invalid_payment_resource(_: Void = ()) -> String {
        return NSLocalizedString("error_message_invalid_payment_resource", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Нет
      static func alert_button_nope(_: Void = ()) -> String {
        return NSLocalizedString("alert_button_nope", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Номер на карте
      static func bank_card_card_number_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("bank_card_card_number_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Оплата банковской картой
      static func bank_card_header_title(_: Void = ()) -> String {
        return NSLocalizedString("bank_card_header_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Оплатить %@
      static func bank_card_pay(_ value1: String) -> String {
        return String(format: NSLocalizedString("bank_card_pay", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: Отменить
      static func alert_button_cancel(_: Void = ()) -> String {
        return NSLocalizedString("alert_button_cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Отсутствует соединение с интернетом.
      static func error_message_no_internet(_: Void = ()) -> String {
        return NSLocalizedString("error_message_no_internet", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Ошибка
      static func alert_title_error(_: Void = ()) -> String {
        return NSLocalizedString("alert_title_error", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Платеж возмещён
      static func unpaid_status_refunded(_: Void = ()) -> String {
        return NSLocalizedString("unpaid_status_refunded", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Платёж отклонён эмитентом.
      static func error_message_rejected_by_issuer(_: Void = ()) -> String {
        return NSLocalizedString("error_message_rejected_by_issuer", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Платёж отклонён.
      static func error_message_payment_rejected(_: Void = ()) -> String {
        return NSLocalizedString("error_message_payment_rejected", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Платёж отменен.
      static func error_message_payment_cancelled(_: Void = ()) -> String {
        return NSLocalizedString("error_message_payment_cancelled", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Повторить
      static func alert_button_retry(_: Void = ()) -> String {
        return NSLocalizedString("alert_button_retry", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Получен некорректный ответ сервера.
      static func error_message_response_mapping_error(_: Void = ()) -> String {
        return NSLocalizedString("error_message_response_mapping_error", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Получен ответ от сервера с HTTP кодом %d.
      static func error_message_unacceptable_status_code(_ value1: Int) -> String {
        return String(format: NSLocalizedString("error_message_unacceptable_status_code", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: Попробовать снова
      static func unpaid_action_retry(_: Void = ()) -> String {
        return NSLocalizedString("unpaid_action_retry", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Попытка внести изменения участника, конфликтующие с изменениями в других заявках, ожидающих рассмотрения.
      static func error_message_changeset_conflict(_: Void = ()) -> String {
        return NSLocalizedString("error_message_changeset_conflict", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Попытка возврата сверх суммы платежа.
      static func error_message_invoice_payment_amount_exceeded(_: Void = ()) -> String {
        return NSLocalizedString("error_message_invoice_payment_amount_exceeded", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Попытка возврата средств в валюте, отличной от валюты платежа.
      static func error_message_inconsistent_refund_currency(_: Void = ()) -> String {
        return NSLocalizedString("error_message_inconsistent_refund_currency", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Последний запущенный платёж по указанному инвойсу ещё не достиг финального статуса.
      static func error_message_invoice_payment_pending(_: Void = ()) -> String {
        return NSLocalizedString("error_message_invoice_payment_pending", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Превышен разумный лимит выборки.
      static func error_message_limit_exceeded(_: Void = ()) -> String {
        return NSLocalizedString("error_message_limit_exceeded", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Превышены лимиты.
      static func error_message_account_limits_exceeded(_: Void = ()) -> String {
        return NSLocalizedString("error_message_account_limits_exceeded", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Предварительная авторизация отклонена.
      static func error_message_preauthorization_failed(_: Void = ()) -> String {
        return NSLocalizedString("error_message_preauthorization_failed", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Произошла неизвестная ошибка.
      static func error_message_unknown_error(_: Void = ()) -> String {
        return NSLocalizedString("error_message_unknown_error", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Произошла ошибка при взаимодействии с пользователем.
      static func error_message_user_interaction_failed(_: Void = ()) -> String {
        return NSLocalizedString("error_message_user_interaction_failed", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Сервер вернул ошибку с неизвестным кодом %@.
      static func error_message_unknown_server_error(_ value1: String) -> String {
        return String(format: NSLocalizedString("error_message_unknown_server_error", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: Сервер недоступен.
      static func error_message_server_unavailable(_: Void = ()) -> String {
        return NSLocalizedString("error_message_server_unavailable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Срок действия инвойса закончился.
      static func error_message_invoice_expired(_: Void = ()) -> String {
        return NSLocalizedString("error_message_invoice_expired", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Стоимость инвойса не указана или неверна.
      static func error_message_invalid_invoice_cost(_: Void = ()) -> String {
        return NSLocalizedString("error_message_invalid_invoice_cost", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Указан идентификатор несуществующего магазина.
      static func error_message_invalid_shop_id(_: Void = ()) -> String {
        return NSLocalizedString("error_message_invalid_shop_id", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Успешная оплата!
      static func paid_title(_: Void = ()) -> String {
        return NSLocalizedString("paid_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Участник заблокирован или его операции приостановлены.
      static func error_message_invalid_party_status(_: Void = ()) -> String {
        return NSLocalizedString("error_message_invalid_party_status", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Чек отправлен по адресу %@
      static func paid_email_description(_ value1: String) -> String {
        return String(format: NSLocalizedString("paid_email_description", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: Элемент не найден.
      static func error_message_element_not_found(_: Void = ()) -> String {
        return NSLocalizedString("error_message_element_not_found", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _LogotypesView.validate()
      try _PaymentMethodsTableFooterView.validate()
      try _PaymentMethodsTableHeaderView.validate()
    }
    
    struct _InvoiceSummaryView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "InvoiceSummaryView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _LogotypesView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LogotypesView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "BottomLogos/3ds_pci_dss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BottomLogos/3ds_pci_dss' is used in nib 'LogotypesView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BottomLogos/lock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BottomLogos/lock' is used in nib 'LogotypesView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BottomLogos/rbk_money", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BottomLogos/rbk_money' is used in nib 'LogotypesView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PaymentMethodCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PaymentMethodCell
      
      let bundle = R.hostingBundle
      let identifier = "PaymentMethodCell"
      let name = "PaymentMethodCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentMethodCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentMethodCell
      }
      
      fileprivate init() {}
    }
    
    struct _PaymentMethodsTableFooterView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PaymentMethodsTableFooterView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Common/rounded_bottom_corners", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/rounded_bottom_corners' is used in nib 'PaymentMethodsTableFooterView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PaymentMethodsTableHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PaymentMethodsTableHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Common/rounded_top_corners", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/rounded_top_corners' is used in nib 'PaymentMethodsTableHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try applePay.validate()
      try bankCard.validate()
      try paidInvoice.validate()
      try paymentMethod.validate()
      try paymentProgress.validate()
      try unpaidInvoice.validate()
    }
    
    struct applePay: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ApplePayViewController
      
      let bundle = R.hostingBundle
      let initial = StoryboardViewControllerResource<ApplePayViewController>(identifier: "Initial")
      let name = "ApplePay"
      
      func initial(_: Void = ()) -> ApplePayViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: initial)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "BankCard/email", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BankCard/email' is used in storyboard 'ApplePay', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Common/close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/close' is used in storyboard 'ApplePay', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.applePay().initial() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'initial' could not be loaded from storyboard 'ApplePay' as 'ApplePayViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct bankCard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BankCardViewController
      
      let bundle = R.hostingBundle
      let initial = StoryboardViewControllerResource<BankCardViewController>(identifier: "Initial")
      let name = "BankCard"
      
      func initial(_: Void = ()) -> BankCardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: initial)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "BankCard/cardholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BankCard/cardholder' is used in storyboard 'BankCard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BankCard/cvv", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BankCard/cvv' is used in storyboard 'BankCard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BankCard/date", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BankCard/date' is used in storyboard 'BankCard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BankCard/email", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BankCard/email' is used in storyboard 'BankCard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BankCard/number", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BankCard/number' is used in storyboard 'BankCard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Common/close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/close' is used in storyboard 'BankCard', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.bankCard().initial() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'initial' could not be loaded from storyboard 'BankCard' as 'BankCardViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct paidInvoice: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PaidInvoiceViewController
      
      let bundle = R.hostingBundle
      let initial = StoryboardViewControllerResource<PaidInvoiceViewController>(identifier: "Initial")
      let name = "PaidInvoice"
      
      func initial(_: Void = ()) -> PaidInvoiceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: initial)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Common/close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/close' is used in storyboard 'PaidInvoice', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Result/paid", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Result/paid' is used in storyboard 'PaidInvoice', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.paidInvoice().initial() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'initial' could not be loaded from storyboard 'PaidInvoice' as 'PaidInvoiceViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct paymentMethod: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PaymentMethodViewController
      
      let bundle = R.hostingBundle
      let initial = StoryboardViewControllerResource<PaymentMethodViewController>(identifier: "Initial")
      let name = "PaymentMethod"
      
      func initial(_: Void = ()) -> PaymentMethodViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: initial)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Common/close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/close' is used in storyboard 'PaymentMethod', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.paymentMethod().initial() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'initial' could not be loaded from storyboard 'PaymentMethod' as 'PaymentMethodViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct paymentProgress: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PaymentProgressViewController
      
      let bundle = R.hostingBundle
      let initial = StoryboardViewControllerResource<PaymentProgressViewController>(identifier: "Initial")
      let name = "PaymentProgress"
      
      func initial(_: Void = ()) -> PaymentProgressViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: initial)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Common/close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/close' is used in storyboard 'PaymentProgress', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.paymentProgress().initial() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'initial' could not be loaded from storyboard 'PaymentProgress' as 'PaymentProgressViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct unpaidInvoice: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UnpaidInvoiceViewController
      
      let bundle = R.hostingBundle
      let initial = StoryboardViewControllerResource<UnpaidInvoiceViewController>(identifier: "Initial")
      let name = "UnpaidInvoice"
      
      func initial(_: Void = ()) -> UnpaidInvoiceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: initial)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Common/close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/close' is used in storyboard 'UnpaidInvoice', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.unpaidInvoice().initial() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'initial' could not be loaded from storyboard 'UnpaidInvoice' as 'UnpaidInvoiceViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
